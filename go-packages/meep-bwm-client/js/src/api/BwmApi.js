/*
 * Copyright (c) 2022  The AdvantEDGE Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE Bandwidth Management API
 * Bandwidth Management Sercice is AdvantEDGE's implementation of [ETSI MEC ISG MEC015 Traffic Management APIs](https://www.etsi.org/deliver/etsi_gs/MEC/001_099/015/02.02.01_60/gs_MEC015v020201p.pdf) <p>[Copyright (c) ETSI 2017](https://forge.etsi.org/etsi-forge-copyright-notice.txt) <p>**Micro-service**<br>[meep-tm](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-tm/server/bwm) <p>**Type & Usage**<br>Edge Service used by edge applications that want to get information about BWM Info and Session(s) in the network <p>**Note**<br>AdvantEDGE supports all Bandwidth Management API endpoints.
 *
 * OpenAPI spec version: 2.2.1
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BwInfo', 'model/BwInfoDeltas', 'model/ProblemDetails'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BwInfo'), require('../model/BwInfoDeltas'), require('../model/ProblemDetails'));
  } else {
    // Browser globals (root is window)
    if (!root.AdvantEdgeBandwidthManagementApi) {
      root.AdvantEdgeBandwidthManagementApi = {};
    }
    root.AdvantEdgeBandwidthManagementApi.BwmApi = factory(root.AdvantEdgeBandwidthManagementApi.ApiClient, root.AdvantEdgeBandwidthManagementApi.BwInfo, root.AdvantEdgeBandwidthManagementApi.BwInfoDeltas, root.AdvantEdgeBandwidthManagementApi.ProblemDetails);
  }
}(this, function(ApiClient, BwInfo, BwInfoDeltas, ProblemDetails) {
  'use strict';

  /**
   * Bwm service.
   * @module api/BwmApi
   * @version 2.2.1
   */

  /**
   * Constructs a new BwmApi. 
   * @alias module:api/BwmApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the bandwidthAllocationDELETE operation.
     * @callback module:api/BwmApi~bandwidthAllocationDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a specific bandwidthAllocation
     * Used in &#39;Unregister from Bandwidth Management Service&#39; procedure as described in clause 6.2.3.
     * @param {String} allocationId Represents a bandwidth allocation instance
     * @param {module:api/BwmApi~bandwidthAllocationDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.bandwidthAllocationDELETE = function(allocationId, callback) {
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling bandwidthAllocationDELETE");
      }


      var pathParams = {
        'allocationId': allocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/problem+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/bw_allocations/{allocationId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bandwidthAllocationGET operation.
     * @callback module:api/BwmApi~bandwidthAllocationGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BwInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a specific bandwidthAllocation
     * Retrieves information about a bandwidthAllocation resource. Typically used in &#39;Get configured bandwidth allocation from Bandwidth Management Service&#39; procedure as described in clause 6.2.5.
     * @param {String} allocationId Represents a bandwidth allocation instance
     * @param {module:api/BwmApi~bandwidthAllocationGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BwInfo}
     */
    this.bandwidthAllocationGET = function(allocationId, callback) {
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling bandwidthAllocationGET");
      }


      var pathParams = {
        'allocationId': allocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/problem+json'];
      var returnType = BwInfo;

      return this.apiClient.callApi(
        '/bw_allocations/{allocationId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bandwidthAllocationListGET operation.
     * @callback module:api/BwmApi~bandwidthAllocationListGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BwInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a list of bandwidthAllocation resources
     * Retrieves information about a list of bandwidthAllocation resources. Typically used in &#39;Get configured bandwidth allocation from Bandwidth Management Service&#39; procedure as described in clause 6.2.5.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.appInstanceId A MEC application instance may use multiple app_instance_ids as an input parameter to query the bandwidth allocation of a list of MEC application instances. app_instance_id corresponds to appInsId defined in table 7.2.2-1. See note.
     * @param {Array.<String>} opts.appName A MEC application instance may use multiple app_names as an input parameter to query the bandwidth allocation of a list of MEC application instances. app_name corresponds to appName defined in table 7.2.2-1. See note.
     * @param {Array.<String>} opts.sessionId A MEC application instance may use session_id as an input parameter to query the bandwidth allocation of a list of sessions. session_id corresponds to allocationId defined in table 7.2.2-1. See note.
     * @param {module:api/BwmApi~bandwidthAllocationListGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BwInfo>}
     */
    this.bandwidthAllocationListGET = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'app_instance_id': {
          value: opts['appInstanceId'],
          collectionFormat: 'multi'
        },
        'app_name': {
          value: opts['appName'],
          collectionFormat: 'multi'
        },
        'session_id': {
          value: opts['sessionId'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'application/problem+json'];
      var returnType = [BwInfo];

      return this.apiClient.callApi(
        '/bw_allocations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bandwidthAllocationPATCH operation.
     * @callback module:api/BwmApi~bandwidthAllocationPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BwInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify the information about a specific existing bandwidthAllocation by sending updates on the data structure
     * Updates the information about a bandwidthAllocation resource. As specified in ETSI GS MEC 009 [6], the PATCH HTTP method updates a resource on top of the existing resource state by just including the changes (&#39;deltas&#39;) in the request body.
     * @param {module:model/BwInfoDeltas} body Description of the changes to instruct the server how to modify the resource representation.
     * @param {String} allocationId Represents a bandwidth allocation instance
     * @param {module:api/BwmApi~bandwidthAllocationPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BwInfo}
     */
    this.bandwidthAllocationPATCH = function(body, allocationId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bandwidthAllocationPATCH");
      }

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling bandwidthAllocationPATCH");
      }


      var pathParams = {
        'allocationId': allocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/problem+json'];
      var returnType = BwInfo;

      return this.apiClient.callApi(
        '/bw_allocations/{allocationId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bandwidthAllocationPOST operation.
     * @callback module:api/BwmApi~bandwidthAllocationPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BwInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bandwidthAllocation resource
     * Used to create a bandwidthAllocation resource. Typically used in &#39;Register to Bandwidth Management Service&#39; procedure as described in clause 6.2.1.
     * @param {module:model/BwInfo} body Entity body in the request contains BwInfo to be created.
     * @param {module:api/BwmApi~bandwidthAllocationPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BwInfo}
     */
    this.bandwidthAllocationPOST = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bandwidthAllocationPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/problem+json'];
      var returnType = BwInfo;

      return this.apiClient.callApi(
        '/bw_allocations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bandwidthAllocationPUT operation.
     * @callback module:api/BwmApi~bandwidthAllocationPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BwInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the information about a specific bandwidthAllocation
     * Updates the information about a bandwidthAllocation resource. As specified in ETSI GS MEC 009 [6], the PUT HTTP method has &#39;replace&#39; semantics.
     * @param {module:model/BwInfo} body BwInfo with updated information is included as entity body of the request.
     * @param {String} allocationId Represents a bandwidth allocation instance
     * @param {module:api/BwmApi~bandwidthAllocationPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BwInfo}
     */
    this.bandwidthAllocationPUT = function(body, allocationId, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bandwidthAllocationPUT");
      }

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling bandwidthAllocationPUT");
      }


      var pathParams = {
        'allocationId': allocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/problem+json'];
      var returnType = BwInfo;

      return this.apiClient.callApi(
        '/bw_allocations/{allocationId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
