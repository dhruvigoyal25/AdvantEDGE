/*
 * Copyright (c) 2022  The AdvantEDGE Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE Bandwidth Management API
 * Bandwidth Management Sercice is AdvantEDGE's implementation of [ETSI MEC ISG MEC015 Traffic Management APIs](https://www.etsi.org/deliver/etsi_gs/MEC/001_099/015/02.02.01_60/gs_MEC015v020201p.pdf) <p>[Copyright (c) ETSI 2017](https://forge.etsi.org/etsi-forge-copyright-notice.txt) <p>**Micro-service**<br>[meep-tm](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-tm/server/bwm) <p>**Type & Usage**<br>Edge Service used by edge applications that want to get information about BWM Info and Session(s) in the network <p>**Note**<br>AdvantEDGE supports all Bandwidth Management API endpoints.
 *
 * OpenAPI spec version: 2.2.1
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BwInfoSessionFilter', 'model/BwInfoTimeStamp'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BwInfoSessionFilter'), require('./BwInfoTimeStamp'));
  } else {
    // Browser globals (root is window)
    if (!root.AdvantEdgeBandwidthManagementApi) {
      root.AdvantEdgeBandwidthManagementApi = {};
    }
    root.AdvantEdgeBandwidthManagementApi.BwInfo = factory(root.AdvantEdgeBandwidthManagementApi.ApiClient, root.AdvantEdgeBandwidthManagementApi.BwInfoSessionFilter, root.AdvantEdgeBandwidthManagementApi.BwInfoTimeStamp);
  }
}(this, function(ApiClient, BwInfoSessionFilter, BwInfoTimeStamp) {
  'use strict';

  /**
   * The BwInfo model module.
   * @module model/BwInfo
   * @version 2.2.1
   */

  /**
   * Constructs a new <code>BwInfo</code>.
   * @alias module:model/BwInfo
   * @class
   * @param allocationDirection {String} The direction of the requested BW allocation: 00 = Downlink (towards the UE) 01 = Uplink (towards the application/session) 10 = Symmetrical
   * @param appInsId {String} Application instance identifier
   * @param fixedAllocation {String} Size of requested fixed BW allocation in [bps]
   * @param requestType {module:model/BwInfo.RequestTypeEnum} Numeric value (0 - 255) corresponding to specific type of consumer as following: 0 = APPLICATION_SPECIFIC_BW_ALLOCATION 1 = SESSION_SPECIFIC_BW_ALLOCATION
   */
  var exports = function(allocationDirection, appInsId, fixedAllocation, requestType) {
    this.allocationDirection = allocationDirection;
    this.appInsId = appInsId;
    this.fixedAllocation = fixedAllocation;
    this.requestType = requestType;
  };

  /**
   * Constructs a <code>BwInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BwInfo} obj Optional instance to populate.
   * @return {module:model/BwInfo} The populated <code>BwInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('allocationId'))
        obj.allocationId = ApiClient.convertToType(data['allocationId'], 'String');
      if (data.hasOwnProperty('allocationDirection'))
        obj.allocationDirection = ApiClient.convertToType(data['allocationDirection'], 'String');
      if (data.hasOwnProperty('appInsId'))
        obj.appInsId = ApiClient.convertToType(data['appInsId'], 'String');
      if (data.hasOwnProperty('appName'))
        obj.appName = ApiClient.convertToType(data['appName'], 'String');
      if (data.hasOwnProperty('fixedAllocation'))
        obj.fixedAllocation = ApiClient.convertToType(data['fixedAllocation'], 'String');
      if (data.hasOwnProperty('fixedBWPriority'))
        obj.fixedBWPriority = ApiClient.convertToType(data['fixedBWPriority'], 'String');
      if (data.hasOwnProperty('requestType'))
        obj.requestType = ApiClient.convertToType(data['requestType'], 'Number');
      if (data.hasOwnProperty('sessionFilter'))
        obj.sessionFilter = ApiClient.convertToType(data['sessionFilter'], [BwInfoSessionFilter]);
      if (data.hasOwnProperty('timeStamp'))
        obj.timeStamp = BwInfoTimeStamp.constructFromObject(data['timeStamp']);
    }
    return obj;
  }

  /**
   * Bandwidth allocation instance identifier
   * @member {String} allocationId
   */
  exports.prototype.allocationId = undefined;

  /**
   * The direction of the requested BW allocation: 00 = Downlink (towards the UE) 01 = Uplink (towards the application/session) 10 = Symmetrical
   * @member {String} allocationDirection
   */
  exports.prototype.allocationDirection = undefined;

  /**
   * Application instance identifier
   * @member {String} appInsId
   */
  exports.prototype.appInsId = undefined;

  /**
   * Name of the application
   * @member {String} appName
   */
  exports.prototype.appName = undefined;

  /**
   * Size of requested fixed BW allocation in [bps]
   * @member {String} fixedAllocation
   */
  exports.prototype.fixedAllocation = undefined;

  /**
   * Indicates the allocation priority when dealing with several applications or sessions in parallel. Values are not defined in the present document
   * @member {module:model/BwInfo.FixedBWPriorityEnum} fixedBWPriority
   */
  exports.prototype.fixedBWPriority = undefined;

  /**
   * Numeric value (0 - 255) corresponding to specific type of consumer as following: 0 = APPLICATION_SPECIFIC_BW_ALLOCATION 1 = SESSION_SPECIFIC_BW_ALLOCATION
   * @member {module:model/BwInfo.RequestTypeEnum} requestType
   */
  exports.prototype.requestType = undefined;

  /**
   * Session filtering criteria, applicable when requestType is set as SESSION_SPECIFIC_BW_ALLOCATION. Any filtering criteria shall define a single session only. In case multiple sessions match sessionFilter the request shall be rejected
   * @member {Array.<module:model/BwInfoSessionFilter>} sessionFilter
   */
  exports.prototype.sessionFilter = undefined;

  /**
   * @member {module:model/BwInfoTimeStamp} timeStamp
   */
  exports.prototype.timeStamp = undefined;


  /**
   * Allowed values for the <code>fixedBWPriority</code> property.
   * @enum {String}
   * @readonly
   */
  exports.FixedBWPriorityEnum = {
    /**
     * value: "SEE_DESCRIPTION"
     * @const
     */
    SEE_DESCRIPTION: "SEE_DESCRIPTION"
  };


  /**
   * Allowed values for the <code>requestType</code> property.
   * @enum {Number}
   * @readonly
   */
  exports.RequestTypeEnum = {
    /**
     * value: 0
     * @const
     */
    _0: 0,

    /**
     * value: 1
     * @const
     */
    _1: 1
  };

  return exports;

}));
