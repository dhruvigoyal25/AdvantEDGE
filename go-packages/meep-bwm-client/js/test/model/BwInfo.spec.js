/*
 * Copyright (c) 2022  The AdvantEDGE Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE Bandwidth Management API
 * Bandwidth Management Sercice is AdvantEDGE's implementation of [ETSI MEC ISG MEC015 Traffic Management APIs](https://www.etsi.org/deliver/etsi_gs/MEC/001_099/015/02.02.01_60/gs_MEC015v020201p.pdf) <p>[Copyright (c) ETSI 2017](https://forge.etsi.org/etsi-forge-copyright-notice.txt) <p>**Micro-service**<br>[meep-tm](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-tm/server/bwm) <p>**Type & Usage**<br>Edge Service used by edge applications that want to get information about BWM Info and Session(s) in the network <p>**Note**<br>AdvantEDGE supports all Bandwidth Management API endpoints.
 *
 * OpenAPI spec version: 2.2.1
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdvantEdgeBandwidthManagementApi);
  }
}(this, function(expect, AdvantEdgeBandwidthManagementApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BwInfo', function() {
      beforeEach(function() {
        instance = new AdvantEdgeBandwidthManagementApi.BwInfo();
      });

      it('should create an instance of BwInfo', function() {
        // TODO: update the code to test BwInfo
        expect(instance).to.be.a(AdvantEdgeBandwidthManagementApi.BwInfo);
      });

      it('should have the property allocationId (base name: "allocationId")', function() {
        // TODO: update the code to test the property allocationId
        expect(instance).to.have.property('allocationId');
        // expect(instance.allocationId).to.be(expectedValueLiteral);
      });

      it('should have the property allocationDirection (base name: "allocationDirection")', function() {
        // TODO: update the code to test the property allocationDirection
        expect(instance).to.have.property('allocationDirection');
        // expect(instance.allocationDirection).to.be(expectedValueLiteral);
      });

      it('should have the property appInsId (base name: "appInsId")', function() {
        // TODO: update the code to test the property appInsId
        expect(instance).to.have.property('appInsId');
        // expect(instance.appInsId).to.be(expectedValueLiteral);
      });

      it('should have the property appName (base name: "appName")', function() {
        // TODO: update the code to test the property appName
        expect(instance).to.have.property('appName');
        // expect(instance.appName).to.be(expectedValueLiteral);
      });

      it('should have the property fixedAllocation (base name: "fixedAllocation")', function() {
        // TODO: update the code to test the property fixedAllocation
        expect(instance).to.have.property('fixedAllocation');
        // expect(instance.fixedAllocation).to.be(expectedValueLiteral);
      });

      it('should have the property fixedBWPriority (base name: "fixedBWPriority")', function() {
        // TODO: update the code to test the property fixedBWPriority
        expect(instance).to.have.property('fixedBWPriority');
        // expect(instance.fixedBWPriority).to.be(expectedValueLiteral);
      });

      it('should have the property requestType (base name: "requestType")', function() {
        // TODO: update the code to test the property requestType
        expect(instance).to.have.property('requestType');
        // expect(instance.requestType).to.be(expectedValueLiteral);
      });

      it('should have the property sessionFilter (base name: "sessionFilter")', function() {
        // TODO: update the code to test the property sessionFilter
        expect(instance).to.have.property('sessionFilter');
        // expect(instance.sessionFilter).to.be(expectedValueLiteral);
      });

      it('should have the property timeStamp (base name: "timeStamp")', function() {
        // TODO: update the code to test the property timeStamp
        expect(instance).to.have.property('timeStamp');
        // expect(instance.timeStamp).to.be(expectedValueLiteral);
      });

    });
  });

}));
